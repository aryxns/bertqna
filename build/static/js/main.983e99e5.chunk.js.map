{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["qna","require","App","React","useState","paragraph","setParagraph","question","setQuestion","answer","setAnswer","a","load","model","findAnswers","answers","console","log","myasnwer","map","className","onChange","e","target","value","placeholder","onClick","event","QnA","store","addNotification","title","message","type","insert","container","animationIn","animationOut","dismiss","duration","onScreen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAIMA,EAAMC,EAAQ,KAgDLC,MA9Cf,WAAgB,IAAD,EACqBC,IAAMC,SAAS,IADpC,mBACNC,EADM,KACKC,EADL,OAEmBH,IAAMC,SAAS,IAFlC,mBAENG,EAFM,KAEIC,EAFJ,OAGeL,IAAMC,SAAS,IAH9B,mBAGNK,EAHM,KAGEC,EAHF,iDAqBb,gCAAAC,EAAA,sEACsBX,EAAIY,OAD1B,cACQC,EADR,gBAIwBA,EAAMC,YAAYP,EAAUF,GAJpD,OAIQU,EAJR,OAKEC,QAAQC,IAAI,aACNC,EAAYH,EAAQI,KAAI,SAAAR,GAAC,OAAKA,EAAC,QACrCD,EAAUQ,GAPZ,4CArBa,sBA8Bb,OAVAF,QAAQC,IAAIR,GAWV,sBAAKW,UAAU,uBAAf,UACE,oBAAIA,UAAU,qCAAd,4BACA,0BAAUC,SAAU,SAAAC,GAAC,OAAIhB,EAAagB,EAAEC,OAAOC,QAAQJ,UAAU,wCAAwCK,YAAY,0BACrH,uBAAOJ,SAAU,SAAAC,GAAC,OAAId,EAAYc,EAAEC,OAAOC,QAAQJ,UAAU,wCAAwCK,YAAY,yBACjH,uBACA,wBAAQC,QAAS,SAASC,IApCjB,mCAoCyBC,GA/BpCC,QAAMC,gBAAgB,CACpBC,MAAO,eACPC,QAAS,+BACTC,KAAM,UACNC,OAAQ,MACRC,UAAW,WACXC,YAAa,CAAC,oBAAqB,mBACnCC,aAAc,CAAC,oBAAqB,oBACpCC,QAAS,CACPC,SAAU,IACVC,UAAU,MAqB0CpB,UAAU,iDAAhE,kBACA,oBAAIA,UAAU,gCAAd,uBACA,cAAC,IAAD,IACCX,EAAOU,KAAI,SAAAV,GAAM,OAChB,oBAAIW,UAAU,gCAAd,SAA+CX,WClCxCgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.983e99e5.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactNotification from 'react-notifications-component'\nimport { store } from 'react-notifications-component';\nimport 'react-notifications-component/dist/theme.css'\nconst qna = require('@tensorflow-models/qna');\n\nfunction App() {\n  const [paragraph, setParagraph] = React.useState(\"\")\n  const [question, setQuestion] = React.useState(\"\")\n  const [answer, setAnswer] = React.useState([])\n  function Renderer(){\n    store.addNotification({\n      title: \"Analyzing...\",\n      message: \"Deconstructing input text...\",\n      type: \"default\",\n      insert: \"top\",\n      container: \"top-left\",\n      animationIn: [\"animate__animated\", \"animate__fadeIn\"],\n      animationOut: [\"animate__animated\", \"animate__fadeOut\"],\n      dismiss: {\n        duration: 10000,\n        onScreen: true\n      }\n    })\n  }\n\n  console.log(answer)\n  async function QnA() {\n    const model = await qna.load();\n    //const question = \"Who is Aryan Sharma?\"\n    //const passage = \"Aryan Sharma is the founder of a global technology company, InternX. He is also an active angel investor.\"\n    const answers = await model.findAnswers(question, paragraph);\n    console.log('Answers: ');\n    const myasnwer = (answers.map(a => (a['text'])));\n    setAnswer(myasnwer)\n  }\n  return (\n    <div className=\"h-screen bg-gray-900\">\n      <h1 className=\"m-10 mt-0 text-2xl text-white pt-5\">BERT-based QnA</h1>\n      <textarea onChange={e => setParagraph(e.target.value)} className=\"ml-10 mt-5 w-4/5 h-48 p-2 bg-gray-100\" placeholder=\"type paragraph here: \"></textarea>\n      <input onChange={e => setQuestion(e.target.value)} className=\"ml-10 mt-5 p-2 bg-gray-100 w-4/5 h-12\" placeholder=\"type question here: \"></input>\n      <br/>\n      <button onClick={function(event){ QnA(); Renderer()}} className=\"bg-gray-600 text-white text-xl p-2 ml-10 mt-10\">FIND</button>\n      <h1 className=\"text-xl text-white ml-10 mt-5\">Answers: </h1>\n      <ReactNotification />\n      {answer.map(answer => (\n        <h1 className=\"text-white text-lg ml-10 mt-5\">{answer}</h1>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}